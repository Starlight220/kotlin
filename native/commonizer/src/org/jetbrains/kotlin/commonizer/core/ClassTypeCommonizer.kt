/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.commonizer.core

import org.jetbrains.kotlin.commonizer.cir.CirClassType
import org.jetbrains.kotlin.commonizer.cir.CirEntityId
import org.jetbrains.kotlin.commonizer.mergedtree.CirKnownClassifiers
import org.jetbrains.kotlin.commonizer.utils.isUnderKotlinNativeSyntheticPackages
import org.jetbrains.kotlin.commonizer.utils.singleDistinctValueOrNull

class ClassTypeCommonizer internal constructor(
    private val classifiers: CirKnownClassifiers,
    private val typeCommonizer: TypeCommonizer,
    private val isMarkedNullableCommonizer: TypeNullabilityCommonizer
) : NullableSingleInvocationCommonizer<CirClassType> {
    override fun invoke(values: List<CirClassType>): CirClassType? {
        if (values.isEmpty()) return null
        val classId = values.singleDistinctValueOrNull { it.classifierId } ?: return null
        val isMarkedNullable = isMarkedNullableCommonizer.commonize(values.map { it.isMarkedNullable }) ?: return null

        if (values.any { !isClassifierAvailableInCommon(classifiers, it.classifierId) }) {
            return null
        }

        val outerType = if (values.all { it.outerType == null }) null
        else if (values.any { it.outerType == null }) return null
        else invoke(values.map { checkNotNull(it.outerType) }) ?: return null

        // Commonizer is stateful: Needs to be created per invocation!
        val arguments = TypeArgumentListCommonizer(typeCommonizer).commonize(values.map { it.arguments }) ?: return null

        return CirClassType.createInterned(
            classId = classId,
            outerType = outerType,

            // N.B. The 'visibility' field in class types is needed ONLY for TA commonization. The class type constructed here is
            // intended to be used in "common" target. It could not participate in TA commonization. So, it does not matter which
            // exactly visibility will be recorded for commonized class type. Passing the visibility of the first class type
            // to reach better interning rate.
            visibility = values.first().visibility,
            arguments = arguments,
            isMarkedNullable = isMarkedNullable
        )
    }
}

private fun isClassifierAvailableInCommon(classifiers: CirKnownClassifiers, classId: CirEntityId): Boolean {
    if (classifiers.commonDependencies.hasClassifier(classId)) {
        // The class is from common fragment of dependency library (ex: stdlib). Already commonized.
        return true
    } else if (classId.packageName.isUnderKotlinNativeSyntheticPackages) {
        // C/Obj-C forward declarations are:
        // - Either resolved to real classes/interfaces from other interop libraries (which are generated by C-interop tool and
        //   are known to have modality/visibility/other attributes to successfully pass commonization).
        // - Or resolved to the same synthetic classes/interfaces.
        // ... and therefore are considered as successfully commonized.
        return true
    }

    // Looking for a a node that provides a non-null (successfully commonized) classifier declaration
    return (classifiers.commonizedNodes.classNode(classId)?.commonDeclaration?.invoke()
        ?: classifiers.commonizedNodes.typeAliasNode(classId)?.commonDeclaration?.invoke()) != null
}
